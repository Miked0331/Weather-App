{"version":3,"sources":["Components/WeatherInfo.js","Components/WeatherContainer.js","Components/App.js","serviceWorker.js","index.js"],"names":["WeatherInfo","props","data","temp","humidity","desc","city","Fragment","className","WeatherContainer","useState","searchQuery","setSearchQuery","description","weatherData","setWeatherData","isValidZipCode","setIsValidZipCode","validateZipCode","zipCode","test","convertToFarenheit","toFixed","placeholder","onChange","event","target","value","isValid","length","maxLength","onClick","fetch","then","response","json","main","weather","name","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6QA+BeA,G,KA5BK,SAACC,GAAW,IAAD,EACQA,EAAMC,KAAlCC,EADoB,EACpBA,KAAKC,EADe,EACfA,SAASC,EADM,EACNA,KAAMC,EADA,EACAA,KAC3B,OACI,kBAAC,IAAMC,SAAP,KACI,4BAAKF,GACL,0BAAMG,UAAU,qBAChB,6BACI,wBAAIA,UAAU,sBAAd,QACA,2BAAIF,IAGR,6BACI,wBAAIE,UAAU,sBAAd,eACA,2BAAIL,EAAK,0BAAMK,UAAU,iBAAhB,QAGb,6BACI,wBAAIA,UAAU,sBAAd,YACA,2BAAIJ,EAAJ,UC+DDK,EAhFU,WACrB,IAD2B,EAEWC,mBAAS,IAFpB,mBAEpBC,EAFoB,KAEPC,EAFO,OAGWF,mBAAS,CAC3CP,KAAM,KACNC,SAAU,KACVS,YAAa,KACbP,KAAM,OAPiB,mBAGpBQ,EAHoB,KAGPC,EAHO,OASgBL,oBAAS,GATzB,mBASrBM,EATqB,KASLC,EATK,KAyBrBC,EAAkB,SAACC,GAErB,MADY,WACCC,KAAKD,IAkBhBE,EAAqB,SAAClB,GACxB,OAAQ,KAAEA,EAAO,QAAyB,IAAImB,QAAQ,IAG1D,OACI,6BAASd,UAAU,qBAE3B,4BAAQA,UAAU,kBACd,uCACA,6BACI,2BACIe,YAAY,WACZf,UAAU,eACVgB,SA/CkB,SAACC,GACvB,IAAIN,EAAUM,EAAMC,OAAOC,MACvBC,EAAUV,EAAgBC,GAC9BP,EAAeO,GAEZS,GAAuB,KAAZT,GAAqC,IAAnBS,EAAQC,QACvCjB,EAAea,EAAMC,OAAOC,OAC5BV,GAAkB,IAG3BA,GAAkB,IAsCNa,UAAU,MAEd,4BACAtB,UAAU,iBACVuB,QAjCmB,WACdf,GAAkC,KAAhBL,EAIvBqB,MAAM,uDAAD,OAAwDrB,EAAxD,qBAlCO,qCAmCXsB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAA/B,GAAI,OAAIa,EAAe,CACzBZ,KAAMkB,EAAmBnB,EAAKkC,KAAKjC,MACnCC,SAAUF,EAAKkC,KAAKhC,SACpBC,KAAMH,EAAKmC,QAAQ,GAAGD,KACtB9B,KAAMJ,EAAKoC,UATXrB,GAAkB,KA6BtB,aAKR,uBAAGT,UAAU,SAAUQ,EAAiB,GAAK,oBAC7C,6BAASR,UAAU,gBACO,OAArBM,EAAYX,KACT,mDACA,uBAAGK,UAAU,kBAAb,aAGJ,kBAAC,EAAD,CAAaN,KAAMY,OCjERyB,MARf,WACE,OACE,6BAAS/B,UAAU,iBAClB,kBAAC,EAAD,QCKegC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.50df3f0c.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../Styles/Weather.scss'\r\n\r\nconst WeatherInfo = (props) => {\r\n    const {temp,humidity,desc, city} = props.data;\r\n    return(\r\n        <React.Fragment>\r\n            <h3>{desc}</h3>\r\n            <span className='weather-data-flex'>\r\n            <div>\r\n                <h4 className='header-description'>City</h4>\r\n                <p>{city}</p>\r\n            </div>\r\n            \r\n            <div>\r\n                <h4 className='header-description'>Temperature</h4>\r\n                <p>{temp}<span className='degree-symbol'> F</span></p>\r\n            </div>\r\n\r\n            <div>\r\n                <h4 className='header-description'>Humidity</h4>\r\n                <p>{humidity}%</p>\r\n            </div>\r\n            </span>\r\n        \r\n            \r\n\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default WeatherInfo","import React, {useState} from 'react'\r\nimport '../Styles/Weather.scss'\r\nimport WeatherInfo from './WeatherInfo'\r\n\r\nconst WeatherContainer = () => {\r\n    const API_KEY = '8eb3018556ed05a86b34d18dcfc963f9'\r\n    const [searchQuery, setSearchQuery] = useState('');\r\n    const [weatherData, setWeatherData] = useState({\r\n        temp: null,\r\n        humidity: null,\r\n        description: null,\r\n        city: null\r\n    });\r\n    const[isValidZipCode, setIsValidZipCode] = useState(true)\r\n\r\n    const updateSearchQuery = (event) => {\r\n        let zipCode = event.target.value\r\n        let isValid = validateZipCode(zipCode)\r\n        setSearchQuery(zipCode)\r\n\r\n        if(isValid || zipCode === '' || isValid.length === 5){\r\n         setSearchQuery(event.target.value)\r\n         setIsValidZipCode(true)\r\n       }\r\n          else {\r\nsetIsValidZipCode(false)\r\n                }\r\n    }\r\n\r\n    const validateZipCode = (zipCode) => {\r\n        let regex = /[0-9]{5}/\r\n        return regex.test(zipCode)\r\n    }\r\n\r\n    const getWeatherData = () => {\r\n        if (!isValidZipCode || searchQuery === '') {\r\n            setIsValidZipCode(false)\r\n            return;\r\n        }\r\n        fetch(`https://api.openweathermap.org/data/2.5/weather?zip=${searchQuery},us&appid=${API_KEY}`)\r\n        .then(response => response.json())\r\n        .then(data => setWeatherData({\r\n            temp: convertToFarenheit(data.main.temp),\r\n            humidity: data.main.humidity,\r\n            desc: data.weather[0].main,\r\n            city: data.name\r\n        }))\r\n    }\r\n\r\n    const convertToFarenheit = (temp) => {\r\n        return (( temp - 273.15 ) * (9.0 / 5.0) + 32).toFixed(0);\r\n    }\r\n\r\n    return(\r\n        <section className=\"weather-container\">\r\n\r\n<header className=\"weather-header\">\r\n    <h3>Weather</h3>\r\n    <div>\r\n        <input\r\n            placeholder=\"Zip Code\"\r\n            className=\"search-input\"\r\n            onChange={updateSearchQuery}\r\n            maxLength='5'\r\n        />\r\n        <button\r\n        className=\"material-icons\"\r\n        onClick={getWeatherData}> search</button>\r\n    </div>\r\n</header>\r\n<p className=\"error\" >{isValidZipCode ? '' : 'Invalid Zip Code'}</p>\r\n<section className=\"weather-info\">\r\n    {weatherData.temp === null ? (\r\n        <p>No Weather To Display\r\n        <i className='material-icons'>wb_sunny</i>\r\n        </p>\r\n    )  :\r\n    <WeatherInfo data={weatherData}/>}\r\n</section>\r\n\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default WeatherContainer","import React from 'react';\nimport '../Styles/App.css';\nimport WeatherContainer from './WeatherContainer'\n\nfunction App() {\n  return (\n    <section className=\"app-container\">\n     <WeatherContainer/>\n    </section>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}